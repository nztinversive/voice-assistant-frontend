// SPDX-FileCopyrightText: 2024 LiveKit, Inc.
//
// SPDX-License-Identifier: Apache-2.0
import { randomUUID } from 'crypto';
import { Future } from '../utils.js';
export class SpeechHandle {
    #id;
    #allowInterruptions;
    #addToChatCtx;
    #isReply;
    #userQuestion;
    #userCommitted = false;
    #initFut = new Future();
    #speechCommitted = false;
    #source;
    #synthesisHandle;
    #initialized = false;
    constructor(id, allowInterruptions, addToChatCtx, isReply, userQuestion) {
        this.#id = id;
        this.#allowInterruptions = allowInterruptions;
        this.#addToChatCtx = addToChatCtx;
        this.#isReply = isReply;
        this.#userQuestion = userQuestion;
    }
    static createAssistantReply(allowInterruptions, addToChatCtx, userQuestion) {
        return new SpeechHandle(randomUUID(), allowInterruptions, addToChatCtx, true, userQuestion);
    }
    static createAssistantSpeech(allowInterruptions, addToChatCtx) {
        return new SpeechHandle(randomUUID(), allowInterruptions, addToChatCtx, false, '');
    }
    async waitForInitialization() {
        await this.#initFut.await;
    }
    initialize(source, synthesisHandle) {
        if (this.interrupted) {
            throw new Error('speech was interrupted');
        }
        this.#source = source;
        this.#synthesisHandle = synthesisHandle;
        this.#initialized = true;
        this.#initFut.resolve();
    }
    markUserCommitted() {
        this.#userCommitted = true;
    }
    markSpeechCommitted() {
        this.#speechCommitted = true;
    }
    get userCommitted() {
        return this.#userCommitted;
    }
    get speechCommitted() {
        return this.#speechCommitted;
    }
    get id() {
        return this.#id;
    }
    get allowInterruptions() {
        return this.#allowInterruptions;
    }
    get addToChatCtx() {
        return this.#addToChatCtx;
    }
    get source() {
        if (!this.#source) {
            throw new Error('speech not initialized');
        }
        return this.#source;
    }
    get synthesisHandle() {
        if (!this.#synthesisHandle) {
            throw new Error('speech not initialized');
        }
        return this.#synthesisHandle;
    }
    set synthesisHandle(handle) {
        this.#synthesisHandle = handle;
    }
    get initialized() {
        return this.#initialized;
    }
    get isReply() {
        return this.#isReply;
    }
    get userQuestion() {
        return this.#userQuestion;
    }
    get interrupted() {
        return !!this.#synthesisHandle?.interrupted;
    }
    interrupt() {
        if (!this.#allowInterruptions) {
            throw new Error('interruptions are not allowed');
        }
        this.cancel();
    }
    cancel() {
        this.#initFut.reject(new Error());
        this.#synthesisHandle?.interrupt();
    }
}
//# sourceMappingURL=speech_handle.js.map