// SPDX-FileCopyrightText: 2024 LiveKit, Inc.
//
// SPDX-License-Identifier: Apache-2.0
import { z } from 'zod';
// XXX: Zod is victim to the dual-package hazard. this is a hacky sorta-fix
// until Zod v4.0.0 is released.
// https://github.com/colinhacks/zod/issues/2241#issuecomment-2142688925
const looksLikeInstanceof = (value, target) => {
    let current = value?.constructor;
    do {
        if (current?.name === target.name)
            return true;
        // eslint-disable-next-line @typescript-eslint/ban-types
        current = Object.getPrototypeOf(current);
    } while (current?.name);
    return false;
};
/** @internal */
export const oaiParams = (p) => {
    const properties = {};
    const requiredProperties = [];
    const processZodType = (field) => {
        const isOptional = field instanceof z.ZodOptional;
        const nestedField = isOptional ? field._def.innerType : field;
        const description = field._def.description;
        if (looksLikeInstanceof(nestedField, z.ZodEnum)) {
            return {
                type: typeof nestedField._def.values[0],
                ...(description && { description }),
                enum: nestedField._def.values,
            };
        }
        else if (looksLikeInstanceof(nestedField, z.ZodArray)) {
            const elementType = nestedField._def.type;
            return {
                type: 'array',
                ...(description && { description }),
                items: processZodType(elementType),
            };
        }
        else if (looksLikeInstanceof(nestedField, z.ZodObject)) {
            const { properties, required } = oaiParams(nestedField);
            return {
                type: 'object',
                ...(description && { description }),
                properties,
                required,
            };
        }
        else {
            let type = nestedField._def.typeName.toLowerCase();
            type = type.includes('zod') ? type.substring(3) : type;
            return {
                type,
                ...(description && { description }),
            };
        }
    };
    for (const key in p.shape) {
        const field = p.shape[key];
        properties[key] = processZodType(field);
        if (!(field instanceof z.ZodOptional)) {
            requiredProperties.push(key);
        }
    }
    const type = 'object';
    return {
        type,
        properties,
        required: requiredProperties,
    };
};
/** @internal */
export const oaiBuildFunctionInfo = (fncCtx, toolCallId, fncName, rawArgs) => {
    if (!fncCtx[fncName]) {
        throw new Error(`AI function ${fncName} not found`);
    }
    return {
        name: fncName,
        func: fncCtx[fncName],
        toolCallId,
        rawParams: rawArgs,
        params: JSON.parse(rawArgs),
    };
};
//# sourceMappingURL=function_context.js.map